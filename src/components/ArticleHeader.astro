---
import { getEntry } from 'astro:content';
import { Image, Picture } from "astro:assets";
import type { ImageMetadata } from "astro";



interface Props {
  title: string;
  image?: string;
  coverAlt?: string;
  modDate: Date;
  author: string;
  category?: string;
  authorImage?: string;
  readTime?: string;
  headings?: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
  showTableOfContents?: boolean;
}

const {
  title,
  image,
  coverAlt,
  modDate,
  author,
  category,
  authorImage,
  readTime = "5 min read",
  headings = [],
  showTableOfContents = true
} = Astro.props;

// Make sure publishDate is a valid Date
// const pubDateObj = new Date(pubDate);

// Format the date
// Ensure pubDateObj is of type Date before formatting
// Validate the date object

  // Format the date
  const formattedDate = new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  }).format(modDate);

  // console.log(formattedDate);


// Filter headings to only include h2 and h3
const filteredHeadings = headings.filter(heading => heading.depth >= 2 && heading.depth <= 3);
const showTOC = showTableOfContents && filteredHeadings.length > 1;

// Import the image dynamically
// Import the image dynamically using glob import
//const images = import.meta.glob<{ default: ImageMetadata }>('src/content/blog/images/*.{jpeg,jpg,png,gif,webp}');

// Import the image dynamically using glob import
const images = import.meta.glob<{ default: ImageMetadata }>([
  'src/content/blog/images/*.{jpeg,jpg,png,gif,webp}',
  '/src/content/blog/images/*.{jpeg,jpg,png,gif,webp}',
  '/public/images/*.{jpeg,jpg,png,gif,webp}',
  '/public/images/authors/*.{jpeg,jpg,png,gif,webp}'
]);

// Ensure the image path exists in our glob imports

// Try to get the main image or use default
let imageData;
try {
  if (images[image]) {
    imageData = await images[image]();
  } else if (images['/public/images/default-image.jpg']) {
    imageData = await images['/public/images/default-image.jpg']();
  } else {
    throw new Error('Neither main image nor default image found');
  }
} catch (error) {
  console.error('Error loading image:', error);
}

// Get author image data
let authorImageData;
try {
  if (authorImage && images[authorImage]) {
    authorImageData = await images[authorImage]();
  } else if (images['/public/images/authors/default-author.jpg']) {
    authorImageData = await images['/public/images/authors/default-author.jpg']();
  }
} catch (error) {
  console.error('Error loading author image:', error);
}

---

<div class="article-header ">
  <!-- Full-width image container with negative margins to extend beyond parent -->
  {/* <div class="image-container relative h-[630px] md:h-[630px] -mx-4 sm:-mx-6 md:-mx-8 lg:-mx-12 xl:-mx-16 overflow-hidden">
    {imageData && (
      <Picture
        src={imageData.default || '/images/default-image.jpg'}
        alt={coverAlt ||`Image of the article titled ${title}`}
        class="w-full h-full object-cover rounded-lg"
        loading="eager"
        height={630}
        width={1200}
      />
    )}
  </div>
  */}
  
    <!-- Gradient overlay -->
    <div class="inset-0 bg-gradient-to-t from-primary-100 via-secondary-100/60 to-transparent image-container relative   overflow-hidden mx-auto">
    

    <!-- Content overlay -->
    <div class=" bottom-0 left-0 w-full p-4 md:p-5 flex flex-col items-start justify-end">
      <h1 class="text-gray-900 text-center text-xl md:text-2xl lg:text-3xl font-bold  lg:pt-4 drop-shadow-sm leading-relaxed mx-auto">
        {title}
      </h1>

      <!-- Compact author info -->
      <div class="flex items-center gap-2 text-gray-700  mx-auto">
        {authorImageData && (
        <Image
          src={authorImageData.default}
          alt={author || `Image of ${author} author at Best of Vacuum`}
          width={44}
          height={44}
      
          class="w-8 h-8 rounded-full object-cover border border-cyan-500/20"
        />
      )}
        <div class="text-sm ">
          <span class="font-medium"><a href={`/authors/dr-christie-winston/`}>{author}</a></span>
          <span class="opacity-75 mx-1 text-cyan-500/80">•</span><span>Last Updated: </span>
           <time datetime={modDate instanceof Date ? modDate.toISOString() :modDate} class="opacity-75">{formattedDate}</time>
           <span class="opacity-75 mx-1">•</span>
           <span class="opacity-75"><a
        href={`/blog/category/${category?.toLowerCase().replace(/\s+/g, '-')}/`}
        class="text-cyan-500 prose prose-sm p-2 no-underline rounded-full bg-slate-800 font-thin hover:text-gray-100 hover:bg-gray-800 text-xs tracking-wider underline-offset-auto"
      >
        {category}
      </a></span>
        </div>
      </div>
    </div>
  </div>

  <!-- Table of Contents Dropdown -->
  {showTOC && (
    <div class="toc-dropdown  relative z-10">
      <button
        id="toc-toggle"
        class="flex items-center gap-2 text-sm bg-gray-50 hover:bg-gray-100 px-4 py-2 rounded-md border border-gray-200 transition-colors duration-200 w-full sm:w-auto"
        aria-expanded="false"
        aria-controls="toc-content"
      >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-blue-600">
          <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 12h16.5M3.75 6.75h16.5M3.75 17.25h16.5" />
        </svg>
        <span class="font-medium text-gray-800">Quick Navigation</span>
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 ml-auto">
          <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
        </svg>
      </button>

      <div
        id="toc-content"
        class="toc-content hidden absolute left-0 right-0 sm:right-auto sm:w-72 mt-1 bg-white p-4 rounded-md border border-gray-200 shadow-md"
      >
        <ul class="space-y-2 max-h-64 overflow-y-auto">
          {filteredHeadings.map((heading) => (
            <li class={`${heading.depth === 3 ? "ml-3 text-sm opacity-90" : "font-medium"}`}>
              <a
                href={`#${heading.slug}`}
                class="block text-blue-600 text-sm hover:text-blue-800 hover:underline transition-colors"
              >
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  )}
</div>

<script is:inline>
  // Toggle table of contents dropdown
  document.addEventListener('DOMContentLoaded', () => {
    const tocToggle = document.getElementById('toc-toggle');
    const tocContent = document.getElementById('toc-content');

    if (tocToggle && tocContent) {
      // Toggle dropdown when button is clicked
      tocToggle.addEventListener('click', () => {
        const expanded = tocToggle.getAttribute('aria-expanded') === 'true';
        tocToggle.setAttribute('aria-expanded', !expanded ? 'true' : 'false');
        tocContent.classList.toggle('hidden');

        // Rotate the arrow icon
        const arrow = tocToggle.querySelector('svg:last-child');
        if (arrow) {
          arrow.style.transform = !expanded ? 'rotate(180deg)' : '';
          arrow.style.transition = 'transform 0.2s ease';
        }
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', (event) => {
        if (!tocToggle.contains(event.target) && !tocContent.contains(event.target)) {
          tocToggle.setAttribute('aria-expanded', 'false');
          tocContent.classList.add('hidden');

          // Reset arrow rotation
          const arrow = tocToggle.querySelector('svg:last-child');
          if (arrow) {
            arrow.style.transform = '';
          }
        }
      });

      // Close dropdown when link is clicked
      tocContent.querySelectorAll('a').forEach((link) => {
        link.addEventListener('click', () => {
          tocToggle.setAttribute('aria-expanded', 'false');
          tocContent.classList.add('hidden');

          // Reset arrow rotation
          const arrow = tocToggle.querySelector('svg:last-child');
          if (arrow) {
            arrow.style.transform = '';
          }
        });
      });
    }
  });
</script>

<style>
  .article-header {
    position: relative;
  }

  /* Ensure the dropdown appears above other content */
  .toc-dropdown {
    position: relative;
    z-index: 20;
  }

  /* Animation for dropdown */
  .toc-content {
    transition: opacity 0.2s, transform 0.2s;
  }

  .toc-content:not(.hidden) {
    animation: fadeInDown 0.2s ease forwards;
  }

  @keyframes fadeInDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 640px) {
    .toc-content {
      max-width: 100%;
    }
  }
</style>
