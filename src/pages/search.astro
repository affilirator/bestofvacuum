---
import { getCollection } from 'astro:content';
import MainLayout from '../layouts/MainLayout.astro';
import SearchInput from '../components/SearchInput.astro';
import SearchFilters from '../components/SearchFilters.astro';
import SearchResultItem from '../components/SearchResultItem.astro';
import {
  searchAndFilterPosts,
  getCategoriesWithCount,
  getTagsWithCount
} from '../utils/searchUtils';

// Get search parameters
const { searchParams } = Astro.url;
const searchQuery = searchParams.get('q') || '';
const categoryFilter = searchParams.get('category') || '';
const tagFilter = searchParams.get('tag') || '';

// Get all blog posts
const allPosts = await getCollection('blog');

// Apply search and filters using our utility function
const filteredPosts = searchAndFilterPosts(
  allPosts,
  searchQuery,
  categoryFilter,
  tagFilter
);

// Get categories and tags with counts
const categoriesWithCount = getCategoriesWithCount(allPosts);
const tagsWithCount = getTagsWithCount(allPosts);

// Convert to arrays and sort
const categories = Object.values(categoriesWithCount).sort((a, b) => b.count - a.count);
const tags = Object.values(tagsWithCount).sort((a, b) => b.count - a.count);

// Create highlighted terms for search results
const highlightTerms = searchQuery ? searchQuery.split(' ').filter(t => t.length > 0) : [];

// Meta information
const title = searchQuery
  ? `Search results for "${searchQuery}"`
  : 'Search Articles';

const description = searchQuery
  ? `Find vacuum reviews and guides matching "${searchQuery}"`
  : 'Search our collection of vacuum cleaner reviews, buying guides, and cleaning tips';
---

<MainLayout
  title={title}
  description={description}
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <header class="text-center mb-12">
      <h1 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">Search Blog Articles</h1>
      <p class="text-lg text-gray-600 max-w-3xl mx-auto mb-8">
        Find vacuum reviews, buying guides, and cleaning tips from our experts.
      </p>

      <!-- Search Form -->
      <form action="/search" method="get" class="max-w-2xl mx-auto">
        <SearchInput
          value={searchQuery}
          placeholder="Search for vacuum reviews, guides, tips..."
          className="mb-4"
        />

        <div class="flex justify-center mt-4">
          <button
            type="submit"
            class="px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            Search
          </button>
        </div>
      </form>
    </header>

    <div class="grid grid-cols-1 lg:grid-cols-4 gap-10">
      <!-- Sidebar with Filters -->
      <aside class="lg:col-span-1">
        <div class="bg-white rounded-lg shadow-md p-6 mb-8 sticky top-24">
          <h2 class="text-xl font-bold text-gray-900 mb-6">Filter Results</h2>

          <form action="/search" method="get" id="filter-form">
            <!-- Keep the search query when filtering -->
            <input type="hidden" name="q" value={searchQuery} />

            <!-- Filters -->
            <SearchFilters
              categories={categories}
              tags={tags}
              selectedCategory={categoryFilter}
              selectedTag={tagFilter}
            />

            <!-- Reset Filters Button -->
            <div class="mt-8 text-center">
              <a
                href={searchQuery ? `/search?q=${encodeURIComponent(searchQuery)}` : '/search'}
                class="text-blue-600 hover:text-blue-800 font-medium text-sm"
              >
                Reset All Filters
              </a>
            </div>
          </form>
        </div>
      </aside>

      <!-- Main Content / Search Results -->
      <div class="lg:col-span-3">
        <!-- Results Count -->
        <div class="mb-6">
          <h2 class="text-lg font-semibold text-gray-800">
            {filteredPosts.length === 0 ? (
              'No results found'
            ) : (
              `Found ${filteredPosts.length} ${filteredPosts.length === 1 ? 'result' : 'results'}`
            )}
            {searchQuery && (
              <span> for "<span class="text-blue-600">{searchQuery}</span>"</span>
            )}
            {categoryFilter && (
              <span> in category "<span class="text-blue-600">{categoriesWithCount[categoryFilter]?.name}</span>"</span>
            )}
            {tagFilter && (
              <span> with tag "<span class="text-blue-600">{tagsWithCount[tagFilter]?.name}</span>"</span>
            )}
          </h2>
        </div>

        <!-- No Results Message -->
        {filteredPosts.length === 0 && (
          <div class="bg-white rounded-lg p-8 text-center shadow-md">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <h3 class="text-xl font-bold text-gray-700 mb-2">No matching results found</h3>
            <p class="text-gray-600 mb-6">
              Try different search terms, removing filters, or browsing our categories.
            </p>
            <div class="flex flex-wrap justify-center gap-3">
              <a href="/blog" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                Browse All Articles
              </a>
              <a href="/search" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">
                Clear Search
              </a>
            </div>
          </div>
        )}

        <!-- Results List -->
        <div class="space-y-6">
          {filteredPosts.map(post => (
            <SearchResultItem
              title={post.data.title}
              description={post.data.description || ''}
              image={post.data.image}
              imageAlt={post.data.coverAlt}
              url={`/blog/${post.slug}/`}
              date={post.data.pubDate}
              category={post.data.category}
              author={post.data.author}
              authorImage={post.data.authorImage}
              authorImageAlt={post.data.authorImageAlt}
              readingTime={post.data.readingTime}
              tags={post.data.tags}
              highlightedTerms={highlightTerms}
            />
          ))}
        </div>
      </div>
    </div>
  </div>
</MainLayout>
