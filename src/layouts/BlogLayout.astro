---
// BlogLayout.astro - Comprehensive blog layout for vacuum reviews

import MainLayout from './MainLayout.astro';
import ArticleHeader from '../components/ArticleHeader.astro';
import ShareButtons from '../components/ShareButtons.astro';
import BlogSchemaMarkup from '../components/BlogSchemaMarkup.astro';
import SearchInput from '../components/SearchInput.astro';
import AuthorInfo from '../components/AuthorInfo.astro';

interface Props {
  title: string;
  excerpt?: string;
  pubDate: Date;
  modDate: Date;
  author: string;
  authorBio: string;
  authorImage: string;
  authorImageAlt: string;
  image?: string;
  coverAlt?: string;
  readingTime?: string;
  category: string;
  tags?: string[];
  keywords?: string[];
  seo?: string;
  showTableOfContents?: boolean;
  showShareButtons?: boolean;
  relatedPosts?: any[];
  canonicalUrl?: string;
  showAuthorBox?: boolean;
}

const {
  title,
  excerpt = '',
  pubDate,
  modDate,
  author,
  authorBio,
  authorImage,
  authorImageAlt,
  image,
  coverAlt,
  readingTime,
  category,
  tags = [],
  keywords = [],
  seo,
  showTableOfContents = true,
  showShareButtons = true,
  relatedPosts = [],
  canonicalUrl,
  showAuthorBox = true,
} = Astro.props;

// Get current URL for canonical link and schema
const currentUrl = Astro.url.href;
const finalCanonicalUrl = canonicalUrl || currentUrl;

// Extract headings from the content
const headings = await Astro.slots.render('default');
const headingRegex = /<h([2-3])[^>]*id=\"([^\"]*)\"[^>]*>([^<]*)<\/h[2-3]>/g;
const extractedHeadings = [];
let match;
while ((match = headingRegex.exec(headings)) !== null) {
  extractedHeadings.push({
    depth: parseInt(match[1]),
    slug: match[2],
    text: match[3].trim(),
  });
}

// Site information for schema
const siteUrl = Astro.site ? Astro.site.toString() : 'https://bestofvacuum.com';
const siteName = 'Best of Vacuum';
const logoUrl = `${siteUrl}/images/logo.svg`;
---

<MainLayout
  title={title}
  description={excerpt}
  image={image}
  canonicalURL={finalCanonicalUrl}
  keywords={keywords}
  type="article"
>
  

  {/* Add schema markup for SEO */}
  <BlogSchemaMarkup
    title={title}
    description={excerpt}
    pubDate={pubDate}
    modDate={modDate}
    author={author}
    authorBio={authorBio}
    authorImage={authorImage}
    image={image}
    url={currentUrl}
    category={category}
    tags={tags}
    siteUrl={siteUrl}
    siteName={siteName}
    logoUrl={logoUrl}
  />

  <article class="container prose lg:prose-xl blog-article max-w-5xl mx-auto px-4 ">
    {/* Category link */}
   

    {/* Integrated Article Header Component */}
    <ArticleHeader
      title={title}
      image={image}
      coverAlt={coverAlt}
      category={category}
      modDate={modDate}
      author={author}
      authorImage={authorImage}
      readTime={readingTime}
      headings={extractedHeadings}
      showTableOfContents={showTableOfContents}
    />

    {/* Tags */}
    {tags.length > 0 && (
      <div class="flex flex-wrap gap-2 mb-6">
        {tags.map(tag => (
          <a
            href={`/blog/tag/${tag.toLowerCase().replace(/\s+/g, '-')}`}
            class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-1 rounded-full text-sm transition-colors duration-200"
          >
            {tag}
          </a>
        ))}
      </div>
    )}

    {/* Social Sharing */}
    {showShareButtons && (
      <ShareButtons
        url={currentUrl}
        title={title}
        description={excerpt}
      />
    )}

    {/* Main Content */}
    <div class="container blog-content prose prose-lg max-w-none mx-auto mt-8">
      <slot />
    </div>

    {/* Bottom Social Sharing */}
    {showShareButtons && (
      <div class="mt-12">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Share This Article</h3>
        <ShareButtons
          url={currentUrl}
          title={title}
          description={excerpt}
        />
      </div>
    )}

    {/* Search Other Articles */}
    <div class="mt-12 p-6 bg-gray-50 rounded-lg border border-gray-200">
      <h3 class="text-lg font-semibold text-gray-800 mb-4">Search More Articles</h3>
      <form action="/search" method="get" class="flex flex-col sm:flex-row gap-3">
        <div class="flex-grow">
          <SearchInput placeholder="Search for more vacuum reviews and guides..." />
        </div>
        <button
          type="submit"
          class="whitespace-nowrap px-4 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          Search
        </button>
      </form>
    </div>

    {/* Bottom Author Bio */}
    {showAuthorBox && (
      <div class="mt-12">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">About the Author</h3>
        <AuthorInfo
          name={author}
          bio={authorBio}
          image={authorImage}
          imageAlt={authorImageAlt}
          pubDate={pubDate}
          modDate={modDate}
        />
      </div>
    )}

    {/* Related Posts */}
    <slot name="related-posts" />
  </article>
</MainLayout>

<style is:global>
  .blog-content {
    /* Override default styles for a better reading experience */
    color: #374151;
    line-height: 1.8;
  }

  .blog-content h2 {
    margin-top: 2.5rem;
    margin-bottom: 1rem;
    font-size: 1.875rem;
    font-weight: 700;
    color: #1f2937;
    scroll-margin-top: 100px;
  }

  .blog-content h3 {
    margin-top: 2rem;
    margin-bottom: 0.75rem;
    font-size: 1.5rem;
    font-weight: 600;
    color: #1f2937;
    scroll-margin-top: 100px;
  }

  .blog-content p {
    margin-bottom: 1.5rem;
  }

  .blog-content a {
    color: #c3050e;
    font-weight: bold;
    text-decoration: none;
    transition: color 0.2s;
  }

  .blog-content a:hover {
    color: #1d4ed8;
    text-decoration: underline;
  }

  .blog-content ul, .blog-content ol {
    margin-top: 1rem;
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }

  .blog-content li {
    margin-bottom: 0.5rem;
  }

  .blog-content img {
    border-radius: 0.5rem;
    margin: 2rem auto;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  .blog-content blockquote {
    border-left: 4px solid #3b82f6;
    padding-left: 1rem;
    color: #4b5563;
    font-style: italic;
    margin: 1.5rem 0;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .blog-content h2 {
      font-size: 1.5rem;
    }

    .blog-content h3 {
      font-size: 1.25rem;
    }
  }

  .blog-content .pros-container, .blog-content .cons-container{
  @apply flex-1 rounded-lg font-thin shadow-stone-500
}
  .blog-content .pros-container {
  @apply bg-green-50 p-4 rounded-lg border border-green-500
}

.blog-content .pros-heading, .blog-content .cons-heading {
  @apply font-mono font-thin prose prose-lg
}
</style>


<script>
  /*
  document.addEventListener('DOMContentLoaded', () => {
  // Find all headings containing Pros/Cons
  const headings = document.querySelectorAll('.blog-content h2, .blog-content, article, .blog-content h3, .blog-content h4, .blog-content strong, .blog-content em, .blog-content p');
  
  headings.forEach(heading => {
    const text = heading.textContent?.toLowerCase();
    const nextEl = heading.nextElementSibling;
    
    if (text?.includes('pros') && nextEl?.tagName === 'UL') {
      nextEl.classList.add('pros');
    }
    else if (text?.includes('cons') && nextEl?.tagName === 'UL') {
      nextEl.classList.add('cons');
    }
  });
});

// Add this to your client-side JavaScript
document.addEventListener('DOMContentLoaded', function() {
    // Find all unordered lists in the document
    const allUnorderedLists = document.querySelectorAll('ul');
    
    allUnorderedLists.forEach(ul => {
        // Get the previous element sibling
        let previousElement = ul.previousElementSibling;
        
        // Check if the previous element is a heading, strong, or em
        if (previousElement && 
            (previousElement.matches('h1, h2, h3, h4, h5, h6, strong, em'))) {
            
            const elementText = previousElement.textContent?.toLowerCase();
            
            // Check if the text contains 'pros' or 'cons'
            if (elementText?.includes('pros') || elementText?.includes('cons')) {
                // Add a class based on content
                if (elementText.includes('pros')) {
                    previousElement.classList.add('pros-heading');
                } else if (elementText.includes('cons')) {
                    previousElement.classList.add('cons-heading');
                }
            }
        }
    });
});
*/

/*

document.addEventListener('DOMContentLoaded', function() {
  const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6, strong, em, p, p em, p strong');
  
  headings.forEach(heading => {
    const text = heading.textContent?.toLowerCase();
    
    if (text?.includes('pros') || text?.includes('cons')) {
      let sibling = heading.nextElementSibling;
      let listElement = null;
      
      // Look for a UL in the next 3 siblings
      for (let i = 0; i < 3 && sibling; i++) {
        if (sibling.tagName === 'UL') {
          listElement = sibling;
          break;
        }
        sibling = sibling.nextElementSibling;
      }
      
      if (listElement) {
        const wrapper = document.createElement('div');
        const isPros = text.includes('pros');
        
        wrapper.className = isPros 
          ? 'pros-container' 
          : 'cons-container';
        
        heading.className += isPros 
          ? ' pros-heading' 
          : ' cons-heading';
        
        // Wrap elements
        heading.parentNode?.insertBefore(wrapper, heading);
        wrapper.appendChild(heading);
        
        // Move all elements between heading and list into wrapper
        let current = heading.nextElementSibling;
        while (current && current !== listElement) {
          const next = current.nextElementSibling;
          wrapper.appendChild(current);
          current = next;
        }
        
        // Finally add the list
        wrapper.appendChild(listElement);
      }
    }
  });
});

*/
document.addEventListener('DOMContentLoaded', function() {
  // Helper function to create container elements
  const createContainer = (isPros, element) => {
    const container = document.createElement('div');
    container.className = isPros 
      ? 'pros-container bg-green-50 p-4 rounded-lg border border-green-200' 
      : 'cons-container bg-red-50 p-4 rounded-lg border border-red-200';
    
    element.parentNode?.insertBefore(container, element);
    return container;
  };

  // Process headings and lists
  document.querySelectorAll('h1, h2, h3, h4, h5, h6, strong, em').forEach(heading => {
    const text = heading.textContent?.toLowerCase();
    if (!text?.includes('pros') && !text?.includes('cons')) return;

    // Find associated UL within next 3 siblings
    let listElement;
    let sibling = heading.nextElementSibling;
    for (let i = 0; i < 3 && sibling; i++) {
      if (sibling.tagName === 'UL') {
        listElement = sibling;
        break;
      }
      sibling = sibling.nextElementSibling;
    }

    if (!listElement) return;

    // Create container and move elements
    const isPros = text.includes('pros');
    const container = createContainer(isPros, heading);
    
    // Style elements
    heading.classList.add(isPros ? 'text-green-500' : 'text-red-500', 'font-bold', 'mb-2');
    listElement.classList.add(isPros ? 'pros-list' : 'cons-list');
    
    // Move elements into container
    container.append(heading, listElement);
  });

  // Pair adjacent pros/cons containers
  const pairContainers = () => {
    const containers = [...document.querySelectorAll('.pros-container, .cons-container')];
    
    while (containers.length) {
      const current = containers.shift();
      const next = containers[0];
      
      if (next && current.classList.contains('pros-container') !== next.classList.contains('pros-container')) {
        const flexContainer = document.createElement('div');
        flexContainer.className = 'flex flex-col md:flex-row gap-4 my-4 w-full';
        
        current.replaceWith(flexContainer);
        flexContainer.append(current, containers.shift());
      }
    }
  };

  pairContainers();
});


function wrapFeaturesSection() {
    const headings = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6'));
    
    headings.forEach(heading => {
        const headingText = heading.textContent?.toLowerCase();
        if (headingText?.includes('features')) {
            const nextSibling = heading.nextElementSibling;
            
            if (nextSibling && nextSibling.tagName === 'UL') {
                const section = document.createElement('section');
                
                section.className = [
                    'glass-container',
                    'max-w-4xl',        // Increased max-width for better columns
                    'mx-auto',
                    'p-8',               // Increased padding
                    'rounded-2xl',
                    'mb-8',
                    'shadow-xl',
                    'backdrop-blur-lg',
                    'bg-white/10',
                    'border',
                    'border-white/20',
                    'hover:bg-white/20',
                    'transition-all'
                ].join(' ');

                heading.parentNode?.insertBefore(section, heading);
                section.appendChild(heading);
                section.appendChild(nextSibling);

                const list = nextSibling;
                list.className = [
                    'space-y-4',         // Increased spacing
                    'text-white/90',
                    'pl-6',
                    'list-disc',
                    'md:columns-2',      // Responsive columns
                    'md:column-gap-12',  // Space between columns
                    'md:column-rule',   // Column divider
                    'md:column-rule-white/20' // Divider color
                ].join(' ');

                heading.className = [
                    'text-3xl',          // Larger heading
                    'font-bold',
                    'mb-6',              // Increased margin
                    'text-white',
                    'tracking-tight',
                    'drop-shadow-md'     // Text shadow
                ].join(' ');
            }
        }
    });
}

document.addEventListener('DOMContentLoaded', wrapFeaturesSection);

  </script>